// client file
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

void error(const char *msg) {
    perror(msg);
    exit(0);
    }
int main(int argc, char *argv[]) {
    int sockfd, portno, n;
    struct sockaddr_in serv_addr;
    struct hostent *server;
    char buffer[256];

    if (argc < 3) {
        fprintf(stderr,"usage %s hostname port\n", argv[0]);
        exit(0);
        }

    portno = atoi(argv[2]);
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd < 0)
        error("ERROR opening socket");

    server = gethostbyname(argv[1]);

    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host\n");
        exit(0);
        }

    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;

    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);

    serv_addr.sin_port = htons(portno);

    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0)
        error("ERROR connecting");


    connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr));

    while(1){

    int op, result;

    if (fork() == 0){
    get_Chat(sockfd);
    exit(0);
    }

    printf("Please enter the message: ");

    scanf("%d",&op);
    write(sockfd,&op,sizeof(int));



    printf("%d\n",op);

    }
    close(sockfd);

    return 0;
}


void get_Chat(int sock){
    while(1) {

    int op1;

    read(sock, &op1, sizeof(int));

  //  write(sock, &result,sizeof(int));

    printf("Here is the message: %d\n",op1);

    }

}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


// server file


/* A simple server in the internet domain using TCP
The port number is passed as an argument */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(const char *msg) {
    perror(msg);
    exit(1);
    }

int main(int argc, char *argv[]) {
    int sockfd, newsockfd, portno;
    socklen_t clilen;
    char buffer[256];
    struct sockaddr_in serv_addr, cli_addr;
    int n;

    if (argc < 2) {
        fprintf(stderr,"ERROR, no port provided\n");
        exit(1);
        }

    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd < 0)
        error("ERROR opening socket");
    bzero((char *) &serv_addr, sizeof(serv_addr));
    portno = atoi(argv[1]);
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
        error("ERROR on binding");
    listen(sockfd,5);
    clilen = sizeof(cli_addr);

    while(1) {

    newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);

    if (fork() == 0){
    get_Chat(newsockfd);
    exit(0);
    }

    if (fork() == 0){
    send_Chat(newsockfd);
    exit(0);
    }

    if (newsockfd < 0)
        error("ERROR on accept");

    bzero(buffer,256);

   /* n = read(newsockfd,buffer,255);

    if (n < 0)
        error("ERROR reading from socket");

    printf("Here is the message: %s\n",buffer);

    n = write(newsockfd,"I got your message",18);

    if (n < 0) error("ERROR writing to socket");
        close(newsockfd);

    close(sockfd);

    **/

    return 0;
}
}

 void get_Chat(int sock){
    while(1) {

    int op1;

    read(sock, &op1, sizeof(int));

  //  write(sock, &result,sizeof(int));

    printf("Here is the message: %d\n",op1);

    }

}

 void send_Chat(int sock){
    while(1) {

    int op2;

    printf("Please enter the message: ");

    scanf("%d",&op2);
    write(sock,&op2,sizeof(int));



    }

}
